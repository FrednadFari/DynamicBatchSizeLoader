# -*- coding: utf-8 -*-
"""DynamicBatchSizeLoader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RBSb1NnLIvl4TygXoeCKpmTtwEF3viOh
"""

import torch
import tensorflow as tf

class DynamicBatchSizeLoader:
    def __init__(self, framework='pytorch'):
        self.framework = framework
        self.batch_sizes = []
        self.percent_intervals = []

    def set_batch_sizes(self, batch_sizes, percent_intervals):
        self.batch_sizes = batch_sizes
        self.percent_intervals = percent_intervals

    def get_batch_size_for_progress(self, progress):
        for i, interval in enumerate(self.percent_intervals):
            if progress <= interval:
                return self.batch_sizes[i]
        return self.batch_sizes[-1]

    def load_data(self, dataset):
        # This is a placeholder for your actual data loading logic
        total_size = len(dataset)
        for i in range(0, total_size, self.get_batch_size_for_progress(i / total_size * 100)):
            # Load a batch here based on the current batch size
            yield ...

# Example usage
loader = DynamicBatchSizeLoader(framework='pytorch')
loader.set_batch_sizes(
    batch_sizes=[32, 64, 128, 256, 512],
    percent_intervals=[20, 40, 60, 80, 100]
)

